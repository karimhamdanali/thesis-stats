...
running Spark with Averroes for specjvm/compress
Loading properties...
Generating the call graph from Spark.

Preparing classes ...
Adding application archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/specjvm/compress-organized-app.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/specjvm/compress-placeholder-lib.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 181
Initially reachable methods: 21
Classes with at least one reachable method: 18
[Spark] Pointer Assignment Graph in 0.8 seconds.
Total types: 104
[Spark] Type masks in 0.0 seconds.
VarNodes: 68
FieldRefNodes: 3
AllocNodes: 35
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 34 nodes.
Now handling field references
Worklist has 50 nodes.
Now handling field references
Worklist has 4 nodes.
Now handling field references
[Spark] Propagation in 1.6 seconds.
[Spark] Solution found in 1.9 seconds.
[Spark] Number of reachable methods: 95
Total time to finish: 5.15
=================================================
# edges = 53
=================================================

elapsed time: 7.26s
