...
running the original Spark for dacapo/bloat
Creating call graph output directory.
Loading averroes properties.
Generating the call graph from Spark.
Adding application archive: /u4/karim/workspace/cgc/averroes/dacapo/bloat.jar
Adding library archive: /u4/karim/workspace/cgc/averroes/dacapo/bloat-deps.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 21310
Initially reachable methods: 8
Classes with at least one reachable method: 3
[Spark] Pointer Assignment Graph in 0.7 seconds.
Total types: 2466
[Spark] Type masks in 0.0 seconds.
VarNodes: 18
FieldRefNodes: 1
AllocNodes: 5
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 5 nodes.
Now handling field references
Worklist has 3055 nodes.
Now handling field references
Worklist has 3075 nodes.
Now handling field references
Worklist has 3872 nodes.
Now handling field references
Worklist has 3438 nodes.
Now handling field references
Worklist has 3947 nodes.
Now handling field references
Worklist has 1923 nodes.
Now handling field references
Worklist has 956 nodes.
Now handling field references
Worklist has 154 nodes.
Now handling field references
Worklist has 49 nodes.
Now handling field references
[Spark] Propagation in 90.9 seconds.
[Spark] Solution found in 93.5 seconds.
[Spark] Number of reachable methods: 11533
=================================================
Original SPARK call graph size = 68946
=================================================

elapsed time: 137.66s
