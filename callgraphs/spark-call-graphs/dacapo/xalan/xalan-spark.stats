...
running Spark for dacapo/xalan
Loading properties...
Generating the call graph from Spark.

Preparing classes ...
Adding application archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/xalan-organized-app.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/xalan-organized-lib.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 45393
Initially reachable methods: 8
Classes with at least one reachable method: 3
[Spark] Pointer Assignment Graph in 0.2 seconds.
Total types: 5354
[Spark] Type masks in 0.0 seconds.
VarNodes: 18
FieldRefNodes: 1
AllocNodes: 5
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 5 nodes.
Now handling field references
Worklist has 1388 nodes.
Now handling field references
Worklist has 1851 nodes.
Now handling field references
Worklist has 2215 nodes.
Now handling field references
Worklist has 3883 nodes.
Now handling field references
Worklist has 5036 nodes.
Now handling field references
Worklist has 5480 nodes.
Now handling field references
Worklist has 4140 nodes.
Now handling field references
Worklist has 2385 nodes.
Now handling field references
Worklist has 1274 nodes.
Now handling field references
Worklist has 514 nodes.
Now handling field references
Worklist has 215 nodes.
Now handling field references
Worklist has 42 nodes.
Now handling field references
Worklist has 6 nodes.
Now handling field references
[Spark] Propagation in 106.2 seconds.
[Spark] Solution found in 107.1 seconds.
[Spark] Number of reachable methods: 17394
size of original spark is: 101131
Total time to finish: 121.2
=================================================
# edges = 14947
=================================================

elapsed time: 129.41s
