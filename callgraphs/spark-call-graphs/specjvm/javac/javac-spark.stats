...
running Spark for specjvm/javac
Loading properties...
Generating the call graph from Spark.

Preparing classes ...
Adding application archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/specjvm/javac-organized-app.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/specjvm/javac-organized-lib.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 36749
Initially reachable methods: 15
Classes with at least one reachable method: 6
[Spark] Pointer Assignment Graph in 0.2 seconds.
Total types: 4351
[Spark] Type masks in 0.0 seconds.
VarNodes: 40
FieldRefNodes: 2
AllocNodes: 9
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 11 nodes.
Now handling field references
Worklist has 1277 nodes.
Now handling field references
Worklist has 1464 nodes.
Now handling field references
Worklist has 2168 nodes.
Now handling field references
Worklist has 3955 nodes.
Now handling field references
Worklist has 3425 nodes.
Now handling field references
Worklist has 2477 nodes.
Now handling field references
Worklist has 2229 nodes.
Now handling field references
Worklist has 616 nodes.
Now handling field references
Worklist has 260 nodes.
Now handling field references
Worklist has 161 nodes.
Now handling field references
Worklist has 37 nodes.
Now handling field references
Worklist has 2 nodes.
Now handling field references
[Spark] Propagation in 43.6 seconds.
[Spark] Solution found in 44.3 seconds.
[Spark] Number of reachable methods: 11559
size of original spark is: 68218
Total time to finish: 55.95
=================================================
# edges = 8867
=================================================

elapsed time: 63.51s
