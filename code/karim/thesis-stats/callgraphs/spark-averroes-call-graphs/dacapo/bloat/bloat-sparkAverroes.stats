...
running Spark with Averroes for dacapo/bloat
Loading properties...
Generating the call graph from SparkAverroes.

Preparing classes ...
Adding application archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/bloat-organized-app.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/bloat-placeholder-lib.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/bloat-averroes-lib-class.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 4246
Initially reachable methods: 4
Classes with at least one reachable method: 4
[Spark] Pointer Assignment Graph in 0.1 seconds.
Total types: 556
[Spark] Type masks in 0.0 seconds.
VarNodes: 16
FieldRefNodes: 1
AllocNodes: 4
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 4 nodes.
Now handling field references
Worklist has 1596 nodes.
Now handling field references
Worklist has 1052 nodes.
Now handling field references
Worklist has 490 nodes.
Now handling field references
Worklist has 693 nodes.
Now handling field references
Worklist has 283 nodes.
Now handling field references
Worklist has 34 nodes.
Now handling field references
[Spark] Propagation in 8.8 seconds.
[Spark] Solution found in 9.1 seconds.
[Spark] Number of reachable methods: 3025
size of original spark is: 20262
Total time to finish: 12.64
=================================================
# edges = 16239
=================================================

elapsed time: 20.80s
