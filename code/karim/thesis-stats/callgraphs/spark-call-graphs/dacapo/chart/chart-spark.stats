...
running Spark for dacapo/chart
Loading properties...
Generating the call graph from Spark.

Preparing classes ...
Adding application archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/chart-organized-app.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/chart-organized-lib.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 49519
Initially reachable methods: 8
Classes with at least one reachable method: 3
[Spark] Pointer Assignment Graph in 0.2 seconds.
Total types: 5534
[Spark] Type masks in 0.0 seconds.
VarNodes: 18
FieldRefNodes: 1
AllocNodes: 5
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 5 nodes.
Now handling field references
Worklist has 2428 nodes.
Now handling field references
Worklist has 3957 nodes.
Now handling field references
Worklist has 4473 nodes.
Now handling field references
Worklist has 3472 nodes.
Now handling field references
Worklist has 2751 nodes.
Now handling field references
Worklist has 1625 nodes.
Now handling field references
Worklist has 774 nodes.
Now handling field references
Worklist has 315 nodes.
Now handling field references
Worklist has 119 nodes.
Now handling field references
Worklist has 41 nodes.
Now handling field references
Worklist has 1 nodes.
Now handling field references
[Spark] Propagation in 92.5 seconds.
[Spark] Solution found in 93.6 seconds.
[Spark] Number of reachable methods: 17461
size of original spark is: 110348
Total time to finish: 108.02
=================================================
# edges = 8266
=================================================

elapsed time: 116.05s
