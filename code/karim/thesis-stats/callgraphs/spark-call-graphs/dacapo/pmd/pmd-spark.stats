...
running Spark for dacapo/pmd
Loading properties...
Generating the call graph from Spark.

Preparing classes ...
Adding application archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/pmd-organized-app.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/dacapo/pmd-organized-lib.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 47531
Initially reachable methods: 8
Classes with at least one reachable method: 3
[Spark] Pointer Assignment Graph in 0.2 seconds.
Total types: 5789
[Spark] Type masks in 0.0 seconds.
VarNodes: 18
FieldRefNodes: 1
AllocNodes: 5
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 5 nodes.
Now handling field references
Worklist has 2263 nodes.
Now handling field references
Worklist has 2950 nodes.
Now handling field references
Worklist has 4484 nodes.
Now handling field references
Worklist has 6280 nodes.
Now handling field references
Worklist has 4621 nodes.
Now handling field references
Worklist has 4173 nodes.
Now handling field references
Worklist has 3530 nodes.
Now handling field references
Worklist has 2942 nodes.
Now handling field references
Worklist has 1586 nodes.
Now handling field references
Worklist has 701 nodes.
Now handling field references
Worklist has 271 nodes.
Now handling field references
Worklist has 3 nodes.
Now handling field references
[Spark] Propagation in 102.0 seconds.
[Spark] Solution found in 103.0 seconds.
[Spark] Number of reachable methods: 18448
size of original spark is: 104888
Total time to finish: 116.96
=================================================
# edges = 7814
=================================================

elapsed time: 125.50s
