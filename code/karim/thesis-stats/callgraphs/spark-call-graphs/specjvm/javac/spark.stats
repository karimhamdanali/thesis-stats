...
running the original Spark for specjvm/javac
Creating call graph output directory.
Loading averroes properties.
Generating the call graph from Spark.
Adding application archive: /u4/karim/workspace/cgc/averroes/specjvm/javac.jar
Adding library archive: /u4/karim/workspace/cgc/averroes/specjvm/javac-deps.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 36749
Initially reachable methods: 15
Classes with at least one reachable method: 6
[Spark] Pointer Assignment Graph in 1.0 seconds.
Total types: 4349
[Spark] Type masks in 0.2 seconds.
VarNodes: 40
FieldRefNodes: 2
AllocNodes: 9
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 11 nodes.
Now handling field references
Worklist has 1290 nodes.
Now handling field references
Worklist has 1458 nodes.
Now handling field references
Worklist has 2173 nodes.
Now handling field references
Worklist has 3953 nodes.
Now handling field references
Worklist has 3432 nodes.
Now handling field references
Worklist has 2477 nodes.
Now handling field references
Worklist has 2229 nodes.
Now handling field references
Worklist has 616 nodes.
Now handling field references
Worklist has 260 nodes.
Now handling field references
Worklist has 161 nodes.
Now handling field references
Worklist has 37 nodes.
Now handling field references
Worklist has 2 nodes.
Now handling field references
[Spark] Propagation in 112.7 seconds.
[Spark] Solution found in 116.0 seconds.
[Spark] Number of reachable methods: 11559
=================================================
Original SPARK call graph size = 68218
=================================================

elapsed time: 163.86s
