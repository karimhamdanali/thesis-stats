...
running Spark for specjvm/raytrace
Loading properties...
Generating the call graph from Spark.

Preparing classes ...
Adding application archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/specjvm/raytrace-organized-app.jar
Adding placeholder library archive: /u4/karim/workspace/thesis-stats/benchmarks-averroes/specjvm/raytrace-organized-lib.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 35733
Initially reachable methods: 25
Classes with at least one reachable method: 11
[Spark] Pointer Assignment Graph in 0.4 seconds.
Total types: 4198
[Spark] Type masks in 0.0 seconds.
VarNodes: 77
FieldRefNodes: 2
AllocNodes: 21
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 22 nodes.
Now handling field references
Worklist has 1098 nodes.
Now handling field references
Worklist has 1461 nodes.
Now handling field references
Worklist has 2021 nodes.
Now handling field references
Worklist has 2499 nodes.
Now handling field references
Worklist has 2243 nodes.
Now handling field references
Worklist has 2132 nodes.
Now handling field references
Worklist has 1196 nodes.
Now handling field references
Worklist has 602 nodes.
Now handling field references
Worklist has 230 nodes.
Now handling field references
Worklist has 97 nodes.
Now handling field references
Worklist has 31 nodes.
Now handling field references
Worklist has 2 nodes.
Now handling field references
[Spark] Propagation in 38.2 seconds.
[Spark] Solution found in 38.9 seconds.
[Spark] Number of reachable methods: 10539
size of original spark is: 57121
Total time to finish: 50.29
=================================================
# edges = 434
=================================================

elapsed time: 55.50s
