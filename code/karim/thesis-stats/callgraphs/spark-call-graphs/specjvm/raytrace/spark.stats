...
running the original Spark for specjvm/raytrace
Creating call graph output directory.
Loading averroes properties.
Generating the call graph from Spark.
Adding application archive: /u4/karim/workspace/cgc/averroes/specjvm/raytrace.jar
Adding library archive: /u4/karim/workspace/cgc/averroes/specjvm/raytrace-deps.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 35733
Initially reachable methods: 25
Classes with at least one reachable method: 11
[Spark] Pointer Assignment Graph in 1.3 seconds.
Total types: 4196
[Spark] Type masks in 0.8 seconds.
VarNodes: 77
FieldRefNodes: 2
AllocNodes: 21
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 22 nodes.
Now handling field references
Worklist has 1110 nodes.
Now handling field references
Worklist has 1455 nodes.
Now handling field references
Worklist has 2026 nodes.
Now handling field references
Worklist has 2499 nodes.
Now handling field references
Worklist has 2245 nodes.
Now handling field references
Worklist has 2132 nodes.
Now handling field references
Worklist has 1196 nodes.
Now handling field references
Worklist has 602 nodes.
Now handling field references
Worklist has 230 nodes.
Now handling field references
Worklist has 97 nodes.
Now handling field references
Worklist has 31 nodes.
Now handling field references
Worklist has 2 nodes.
Now handling field references
[Spark] Propagation in 95.0 seconds.
[Spark] Solution found in 98.0 seconds.
[Spark] Number of reachable methods: 10539
=================================================
Original SPARK call graph size = 57121
=================================================

elapsed time: 143.45s
